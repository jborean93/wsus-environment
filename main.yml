- name: setup common Windows information
  hosts: windows
  gather_facts: no

  tasks:
  - name: get network connection names
    win_shell: |
      Get-CimInstance -ClassName Win32_NetworkAdapter -Filter "Netenabled='True'" | ForEach-Object -Process {
        $config = Get-CimInstance -ClassName Win32_NetworkAdapterConfiguration -Filter "Index='$($_.Index)'"
        if ($config.IPAddress -contains '{{ ansible_host }}') {
          $_.NetConnectionID
        }
      }
    changed_when: false
    register: raw_connection_name

  - set_fact:
      public_connection_name: '{{ raw_connection_name.stdout | trim }}'

- name: create domain controller
  hosts: DC
  gather_facts: no

  tasks:
  - name: set the DNS for the internal adapters to localhost
    win_dns_client:
      adapter_names:
      - '{{ public_connection_name }}'
      dns_servers:
      - 127.0.0.1

  - name: ensure domain exists and DC is promoted as a domain controller
    win_domain:
      dns_domain_name: '{{ domain_realm }}'
      safe_mode_password: '{{ domain_password }}'
    register: domain_setup_res

  - name: reboot after DC install
    win_reboot:
    when: domain_setup_res.reboot_required

  - name: create domain username
    win_domain_user:
      name: '{{ domain_username }}'
      upn: '{{ domain_username }}@{ domain_realm | upper }}'
      description: '{{ domain_username }} Domain Account'
      password: '{{ domain_password }}'
      password_never_expires: yes
      update_password: when_changed
      groups:
      - Domain Admins
      state: present

- name: join Windows hosts to the domain
  hosts: windows:!DC
  gather_facts: no

  tasks:
  - name: set DNS for the private adapter to point to the DC
    win_dns_client:
      adapter_names:
      - '{{ public_connection_name }}'
      dns_servers:
      - '{{ hostvars["DC"]["ansible_host"] }}'

  - name: join host to the domain
    win_domain_membership:
      dns_domain_name: '{{ domain_realm }}'
      domain_admin_user: '{{ domain_username }}@{{ domain_realm | upper }}'
      domain_admin_password: '{{ domain_password }}'
      state: domain
    register: domain_join

  - name: reboot after joining domain
    win_reboot:
    when: domain_join.reboot_required

# The configuration tasks have mostly be taken from https://smsagent.blog/2014/02/07/installing-and-configuring-wsus-with-powershell/
- name: configure WSUS server
  hosts: WSUS-SERVER
  gather_facts: no

  tasks:
  - name: install MS report viewer
    win_chocolatey:
      name: reportviewer2012
      state: present

  - name: install WSUS and IIS features
    win_feature:
      name:
      - UpdateServices
      - Web-Server
      state: present
      include_management_tools: yes
    register: wsus_feature

  - name: reboot after installing WSUS feature
    win_reboot:
    when: wsus_feature.reboot_required

  - name: ensure temp dirs used by IIS have the proper ACLs
    win_acl:
      path: '{{ item }}'
      rights: FullControl
      state: present
      type: allow
      user: S-1-5-20  # NT AUTHORITY\NetworkService
    loop:
    - C:\Windows\TEMP
    - C:\Windows\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET Files

  - name: configure WSUS content dir
    win_command: '"C:\Program Files\Update Services\Tools\WsusUtil.exe" postinstall'
    when: wsus_feature is changed

  - name: set initial WSUS configuration
    ansible.windows.win_powershell:
      error_action: stop
      script: |
        $Ansible.Changed = $false
        $config = (Get-WsusServer).GetConfiguration()

        if (-not $config.SyncFromMicrosoftUpdate) {
            $null = Set-WsusServerSynchronization -SyncFromMU
            $Ansible.Changed = $true
        }

        if (-not $config.OobeInitialized) {
            $config.OobeInitialized = $true
            $Ansible.Changed = $true
        }

        if (-not $config.GetContentFromMU) {
            $config.GetContentFromMU = $true
            $Ansible.Changed = $true
        }

        if (-not $config.DownloadExpressPackages) {
            $config.DownloadExpressPackages = $true
            $Ansible.Changed = $true
        }

        if (-not $config.DownloadUpdateBinariesAsNeeded) {
            $config.DownloadUpdateBinariesAsNeeded = $true
            $Ansible.Changed = $true
        }

        if ($config.HostBinariesOnMicrosoftUpdate) {
            $config.HostBinariesOnMicrosoftUpdate = $false
            $Ansible.Changed = $true
        }

        if ($config.AllUpdateLanguagesEnabled) {
            $config.AllUpdateLanguagesEnabled = $false
            $Ansible.Changed = $true
        }

        $existingUpdateLanaguages = @($config.GetEnabledUpdateLanguages())
        if ($existingUpdateLanaguages.Count -ne 1 -or $existingUpdateLanaguages[0] -ne 'en') {
            $config.SetEnabledUpdateLanguages('en')
            $Ansible.Changed = $true
        }

        if ($Ansible.Changed) {
            $config.Save()
        }

  # This step can take a long time
  - name: run initial WSUS category synchronization
    ansible.windows.win_powershell:
      error_action: stop
      script: |
        $Ansible.Changed = $false
        $subscription = (Get-WsusServer).GetSubscription()

        if ($subscription.GetLastSynchronizationInfo().Result -eq 'NeverRun') {
            $Ansible.Changed = $true

            $subscription.StartSynchronizationForCategoryOnly()
            while ($subscription.GetSynchronizationStatus() -ne 'NotProcessing') {
                Start-Sleep -Seconds 5
            }
        }

  - name: configure products and classifications
    ansible.windows.win_powershell:
      error_action: stop
      script: |
        $Ansible.Changed = $false
        $subscription = (Get-WsusServer).GetSubscription()

        $existingProducts = $subscription.GetUpdateCategories().Title
        $newProducts = Get-WsusProduct | Where-Object {
            $title = $_.Product.Title

            (
                $title -notin $existingProducts -and (
                    ($title -like 'Windows Server 2019*' -and $title -notlike '*Azure*') -or
                    $title -like 'Microsoft Defender*'
                )
            )
        }
        if ($newProducts) {
            $Ansible.Changed = $true
            $newProducts | Set-WsusProduct
        }

        # Make sure the full Windows product isn't enabled (there are a lot of updates there)
        if ('Windows' -in $existingProducts) {
            $Ansible.Changed = $true
            $windowsProduct = Get-WsusProduct | Where-Object {
                $_.Product.Title -eq 'Windows'
            } | Set-WsusProduct -Disable
        }

        $existingClassifications = $subscription.GetUpdateClassifications().Id
        $newClassifications = Get-WsusClassification | Where-Object {
            (
                $_.Classification.Title -notlike 'Driver*' -and
                $_.Classification.Id -notin $existingClassifications
            )
        }
        if ($newClassifications) {
            $Ansible.Changed = $true
            $newClassifications | Set-WsusClassification
        }
    register: wsus_product_set

  # This step can take a long time
  - name: run initial WSUS synchronization
    ansible.windows.win_powershell:
      error_action: stop
      script: |
        $subscription = (Get-WsusServer).GetSubscription()
        $subscription.StartSynchronization()
        $started = $false
        while ($true) {
             Start-Sleep -Seconds 5
             $progress = $subscription.GetSynchronizationProgress()

             if ($progress.TotalItems -eq 0) {
                 if ($started) {
                     # sync has finished and gone back to the default value
                     break
                 }

                 # sync hasn't started, try again
             }
             else {
                 # Sync has started but not finished
                 $started = $true
             }
        }
    when: wsus_product_set is changed

- name: configure WSUS server on client
  hosts: APP
  gather_facts: no

  tasks:
  - name: configure WSUS registry settings
    win_regedit:
      path: HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate{{ item.path }}
      name: '{{ item.name }}'
      data: '{{ item.data }}'
      type: '{{ item.type | default("string") }}'
      state: present
    loop:
    - path: ''
      name: WUServer
      data: http://WSUS-SERVER.{{ domain_realm }}:8530
    - path: ''
      name: WUStatusServer
      data: http://WSUS-SERVER.{{ domain_realm }}:8530
    - path: ''
      name: DoNotConnectToWindowsUpdateInternetLocations
      data: 1
      type: dword
    - path: \AU
      name: UseWUServer
      data: 1
      type: dword

  - name: check if host is configured in WSUS
    ansible.windows.win_powershell:
      error_action: stop
      script: |
        [CmdletBinding()]
        param ($ComputerName)

        $Ansible.Changed = $false
        Get-WsusComputer -All | Where-Object FullDomainName -eq $ComputerName
      parameters:
        ComputerName: '{{ inventory_hostname }}.{{ domain_realm }}'
    delegate_to: WSUS-SERVER
    register: wsus_host_entry

  - name: register client to WSUS server
    ansible.windows.win_powershell:
      error_action: stop
      # By manually running a search the host will register itself with WSUS
      script: |
        $session = New-Object -ComObject Microsoft.Update.Session
        $searcher = $session.CreateUpdateSearcher()
        $null = $searcher.Search('').Updates

        wuauclt.exe /reportnow
    when: (wsus_host_entry.output | length) == 0

